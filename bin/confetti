#!/bin/bash

# Figure out script absolute path
pushd `dirname $0` > /dev/null
BIN_DIR=`pwd`
popd > /dev/null

ROOT_DIR=`dirname $BIN_DIR`

# Find JQF classes and JARs
project="jqf"
version="1.1-SNAPSHOT"

FUZZ_DIR="${ROOT_DIR}/fuzz/target/"
INST_DIR="${ROOT_DIR}/instrument/target/"
JACOCO_DIR="${ROOT_DIR}/instrument/"

FUZZ_JAR="${FUZZ_DIR}/$project-fuzz-$version.jar"
FUZZ_CLASSPATH="${FUZZ_JAR}:${FUZZ_DIR}/classes"

RES=fuzz-logs

# Z3 Timeout
Z3_TO=$((60*1000)) #10 sec

if [ -z "$PORT" ] ; then
    PORT=$((5000 + (RANDOM % 1000)))
fi

if [ -z "$EXP_CENTRAL_PROPS" ]; then
  EXP_CENTRAL_PROPS=$ROOT_DIR/scripts/confetti.properties
fi

print_usage() {
  echo "Usage: $0 [-c CLASSPATH] [-v] TEST_CLASS TEST_METHOD RESULTS_DIR"
}

while getopts ":c:v" opt; do
  case $opt in
    /?)
      echo "Invalid option: -$OPTARG" >&2
      print_usage >&1
      exit 1
      ;;
    c)
      export CLASSPATH="$OPTARG"
      ;;
    v)
      export JVM_OPTS="$JVM_OPTS"
      ;;
  esac
done
shift $((OPTIND-1))

# Check arguments
if [ $# -lt 2 ]; then
  print_usage >&1
  exit 1
fi

KNARR_JAR=$ROOT_DIR/confetti-generated/Knarr-0.0.2-SNAPSHOT.jar
if [ ! -f $KNARR_JAR ]; then
  mvn -q dependency:get -Dartifact=edu.gmu.swe.knarr:Knarr:0.0.2-SNAPSHOT -DremoteRepositories=https://oss.sonatype.org/content/repositories/snapshots
  mvn -q dependency:copy -Dartifact=edu.gmu.swe.knarr:Knarr:0.0.2-SNAPSHOT -DoutputDirectory=$ROOT_DIR/confetti-generated/
  (cd $ROOT_DIR/confetti-generated && mv Knarr-0.0* Knarr-0.0.2-SNAPSHOT.jar)
fi

Z3_DIR=$ROOT_DIR/z3
if [ ! -d "$Z3_DIR" ]; then
  unameOut="$(uname -s)"
  case "${unameOut}" in
      Linux*)     Z3_DOWNLOAD=https://github.com/Z3Prover/z3/releases/download/z3-4.6.0/z3-4.6.0-x64-ubuntu-16.04.zip;;
      Darwin*)    Z3_DOWNLOAD=https://github.com/Z3Prover/z3/releases/download/z3-4.6.0/z3-4.6.0-x64-osx-10.11.6.zip;;
  esac
  if [ -n "$Z3_DOWNLOAD" ]; then
    mkdir -p $Z3_DIR
    (cd $Z3_DIR && wget -q $Z3_DOWNLOAD && unzip z3-4.6* && mv z3-*/* .)
  else
    echo "Please download and install the correct version of Z3 for your platform to $Z3_DIR"
    echo "This is the version we've tested on Linux: https://github.com/Z3Prover/z3/releases/download/z3-4.6.0/z3-4.6.0-x64-ubuntu-16.04.zip"
    exit 1
  fi
else
  # Sanity check that z3 is really there and works
  $Z3_DIR/bin/z3 --version > /dev/null
  if [ $? -ne 0 ]; then
    echo "Unable to run z3, please make sure that $Z3_DIR/bin/z3 is executable on this platform"
    exit 1
  fi
fi
Z3_BIN=$Z3_DIR/bin


# Make sure that we have an instrumented JVM
INST_JVM_DIR=$ROOT_DIR/confetti-generated/confetti-inst-jvm
if [ ! -d "$INST_JVM_DIR" ]; then
  if [ -z "$INST_HOME" ]; then
  	INST_HOME=$JAVA_HOME;
  fi
  if [ -z "$JAVA_HOME" ]; then
  	echo "Error: Please set \$JAVA_HOME";
  fi
  echo "Instrumenting JVM - this will take a few minutes, but is a one-time operation"
  echo "Storing instrumented JVM to $INST_JVM_DIR"
  $JAVA_HOME/bin/java -DspecialStrings=equals,startsWith,indexOf,contains,endsWith,isEmpty -DaddCov="javax/imageio" -Xmx6g -jar $KNARR_JAR $INST_HOME $INST_JVM_DIR
  if [ -d "$INST_JVM_DIR/jre-inst" ]; then
    chmod +x $INST_JVM_DIR/jre/bin/*;
    chmod +x $INST_JVM_DIR/jre/lib/*;
  fi
  chmod +x $INST_JVM_DIR/bin/*;
  chmod +x $INST_JVM_DIR/lib/*;
fi

if [ -z "$EXP_PRI_FILE" ]; then
    EXP_PRI_FILE="/dev/null"
fi

#JQF_DEBUG="-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5555,suspend=n"
JQF_OPTS="-Xmx3G -Dpriority=$EXP_PRI_FILE $JQF_OPTS"
JQF_CMD="JVM_OPTS=\"-DcentralPort=$PORT $JVM_OPTS $JQF_OPTS $JQF_DEBUG $EXP_EXTRA_OPTS\" $ROOT_DIR/bin/jqf-ei -c $CLASSPATH $@"

Z3_OUTPUT_DIR=
#CENTRAL_DEBUG="-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5554,suspend=n"
CENTRAL_OPTS="-Xmx3G -Xss16m"
CENTRAL_CMD="$JAVA_HOME/bin/java $CENTRAL_DEBUG $JVM_OPTS $CENTRAL_OPTS -Djava.library.path=$Z3_BIN $Z3_OUTPUT_DIR -DZ3_TIMEOUT=$Z3_TO $EXP_EXTRA_OPTS -cp "${FUZZ_CLASSPATH}:${CLASSPATH}" -DcentralPort=$PORT edu.berkeley.cs.jqf.fuzz.central.Central $3 $EXP_CENTRAL_PROPS"

#KNARR_DEBUG="-Xdebug -Xrunjdwp:server=y,transport=dt_socket,address=5556,suspend=n"
KNARR_OPTS="-Xss16m -Xmx5g -Xbootclasspath/p:$KNARR_JAR -javaagent:$KNARR_JAR"
KNARR_CMD="$INST_JVM_DIR/bin/java $JAVA_OPTS $JVM_OPTS -DcentralPort=$PORT -Dsize=15 $KNARR_OPTS $KNARR_DEBUG $EXP_EXTRA_OPTS -cp "${FUZZ_CLASSPATH}:${CLASSPATH}" edu.berkeley.cs.jqf.fuzz.knarr.KnarrDriver $@"



#echo $CENTRAL_CMD > central.sh
#echo $KNARR_CMD > knarr.sh
#echo $JQF_CMD > jqf.sh
#exit

mkdir -p $RES
#Launch Central
export LD_LIBRARY_PATH=$Z3_BIN
export DYLD_LIBRARY_PATH=$Z3_BIN
echo "Central server logging to $RES/central.log"
$CENTRAL_CMD &> $RES/central.log &
CENTRAL_PID=$!
echo "Central started in pid $CENTRAL_PID"

sleep 5

echo "Knarr process logging to $RES/knarr.log"
# Launch Knarr
$KNARR_CMD &> $RES/knarr.log &
KNARR_PID=$!
echo "Knarr started in pid $KNARR_PID"

cleanup(){
  kill $KNARR_PID > /dev/null 2>&1
  kill $CENTRAL_PID > /dev/null 2>&1
}
trap "exit" INT TERM ERR
trap "cleanup || true" EXIT

# Launch JQF
bash -c "$JQF_CMD"
